<?xml version="1.0" ?>
<!--
  ~ This file is based on code taken from the Apache Calcite project, which was released under the Apache License.
  ~ The changes are released under the MIT license.
  ~
  ~
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  ~
  ~ The MIT License (MIT)
  ~
  ~ Copyright (c) 2019 Databases and Information Systems Research Group, University of Basel, Switzerland
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a
  ~ copy of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  -->
<Root>
  <TestCase name="testReplaceCommonSubexpression">
    <Resource name="sql">
      <![CDATA[select d1.deptno from (select * from dept) d1, (select * from dept) d2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchUntilFixpoint">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}])
      LogicalUnion(all=[true])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(ENAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchLimitOneTopDown">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalUnion(all=[true])
    LogicalUnion(all=[false])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchLimitOneBottomUp">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalAggregate(group=[{0}])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleClass">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) intersect (select fname from customer.contact)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalIntersect(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(FNAME=[$1])
    LogicalTableScan(table=[[CATALOG, CUSTOMER, CONTACT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalIntersect(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[CAST($0):VARCHAR(20) NOT NULL])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(FNAME=[CAST($0):VARCHAR(20) NOT NULL])
    LogicalProject(FNAME=[$1])
      LogicalTableScan(table=[[CATALOG, CUSTOMER, CONTACT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSubprogram">
    <Resource name="sql">
      <![CDATA[select upper(ename) from (select lower(ename) as ename from emp)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[UPPER(LOWER($1))])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalCalc(expr#0..8=[{inputs}], expr#9=[LOWER($t1)], expr#10=[UPPER($t9)], EXPR$0=[$t10])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleDescription">
    <Resource name="sql">
      <![CDATA[select name from sales.dept where deptno=12]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(NAME=[$1])
  LogicalFilter(condition=[=($0, 12)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(NAME=[$1])
  LogicalCalc(expr#0..1=[{inputs}], expr#2=[12], expr#3=[=($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testGroup">
    <Resource name="sql">
      <![CDATA[select upper(name) from dept where deptno=20]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[UPPER($1)])
  LogicalFilter(condition=[=($0, 20)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalCalc(expr#0..1=[{inputs}], expr#2=[UPPER($t1)], expr#3=[20], expr#4=[=($t0, $t3)], EXPR$0=[$t2], $condition=[$t4])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
</Root>
